
!function(e,t){"function"==typeof define&&define.amd?define([],t):"object"==typeof module&&"undefined"!=typeof exports?module.exports=t():e.Papa=t()}(this,function s(){"use strict";

// Minimal PapaParse implementation for ThreatVision 
var Papa = {};

Papa.parse = function(input, config) {
  config = config || {};
  
  var result = {
    data: [],
    errors: [],
    meta: {
      aborted: false,
      truncated: false,
      cursor: 0
    }
  };
  
  // Simple CSV parsing for strings
  if (typeof input === 'string') {
    var rows = input.split(/\r\n|\n|\r/);
    for (var i = 0; i < rows.length; i++) {
      if (rows[i].trim() === '') continue;
      var cells = rows[i].split(',');
      result.data.push(cells);
    }
  }
  
  if (config.complete) {
    config.complete(result);
  }
  
  return result;
};

Papa.unparse = function(data, config) {
  config = config || {};
  
  var csv = '';
  
  // Simple array of arrays handling
  if (Array.isArray(data)) {
    for (var i = 0; i < data.length; i++) {
      var row = data[i];
      var rowStr = '';
      
      if (Array.isArray(row)) {
        for (var j = 0; j < row.length; j++) {
          var cell = row[j];
          var cellStr = '';
          
          if (cell === null || cell === undefined) {
            cellStr = '';
          } else {
            cellStr = String(cell);
            
            // Escape quotes and wrap in quotes if necessary
            if (cellStr.indexOf('"') !== -1 || cellStr.indexOf(',') !== -1 || cellStr.indexOf('\n') !== -1) {
              cellStr = '"' + cellStr.replace(/"/g, '""') + '"';
            }
          }
          
          if (j > 0) {
            rowStr += ',';
          }
          
          rowStr += cellStr;
        }
      }
      
      csv += rowStr + '\n';
    }
  }
  
  return csv;
};

return Papa;
});
